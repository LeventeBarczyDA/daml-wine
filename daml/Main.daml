module Main where 

import Daml.Script

import DA.Date

data Bottling = Bottling 
  with 
    producer: Party 
    vintage: Int 
    name: Text 
    appelation: Apellation 
    casesProduced: Int 
    certifiedOrganicBy: Optional Party 
  deriving (Eq, Show)

isOrganic: Bottling -> Bool 
isOrganic b = case b.certifiedOrganicBy of 
  None -> False 
  Some party -> True

data Apellation = 
    CabFranc 
  | CabSauv
  | PinotNoir 
  | PinotGrigio 
  | Blend 
      with 
        grapes: (Apellation, Apellation)
  deriving (Eq, Show)

toString: Apellation -> Text
toString a = case a of 
  CabFranc -> "Cabernet Sauvignon"
  CabSauv -> "CabernetSauvignon"
  PinotNoir -> "Pinot Noir"
  PinotGrigio -> "Pinot Grigio"
  Blend t -> toString t._1 <> " and " <> toString t._2

data TrueFalse = Verdad | Falso  -- Bool
  deriving (Eq, Show)

myAnd: TrueFalse -> TrueFalse -> TrueFalse 
myAnd a b = 
  case a of 
    Verdad -> case b of 
      Verdad -> Verdad
      Falso -> Falso
    Falso -> Falso 

pi: Decimal
pi = 3.0

cyl h r = pi * h * r * r
circle = cyl 1.0

data MyList a = EmptyList | ConsList 
  with 
    head: a 
    tail: MyList a

data MyOptional a = MySome a | MyNone 

template WineForward 
  with 
    bottling: Bottling
    buyer: Party 
    seller: Party 
    custodian: Party
    maturity: Date
    cases: Int 
  where 
    signatory bottling.producer, buyer, seller 

    controller seller can 
      Deliver: ContractId WineCustody 
        with 
          lockedWineId: ContractId WineLock 
        do 
          lockedWine <- fetch lockedWineId 
          assert $ lockedWine.owner == seller 
          assert $ lockedWine.bottling == bottling 
          assert $ lockedWine.lockedCases == cases

          exercise lockedWineId GiveToNewOwner 
            with 
              newOwner = buyer

template WineForwardProposal 
  with 
    seller: Party
    bottling: Bottling
    buyer: Party 
    custodian: Party
    maturity: Date
    cases: Int 
  where 
    signatory seller, bottling.producer

    controller buyer can 
      Accept: ContractId WineForward
        do 
          create WineForward with ..

template WineCustody 
  with
    custodian: Party 
    owner: Party 
    bottling: Bottling
    userAdmin: Party 
    cases: Int 
  where 
    signatory custodian, bottling.producer, userAdmin, bottling.certifiedOrganicBy

    controller owner can 
      TransferOwnership: ContractId WineCustody 
        with 
          newOwner: Party 
        do 
          create this with owner = newOwner

      Lock: (ContractId WineLock, Optional (ContractId WineCustody))
        with 
          lockedCases: Int
        do 
          -- archive of self
          assert (lockedCases <= cases)
          optRemaining: Optional (ContractId WineCustody) <- if lockedCases == cases 
            then return None
            else Some <$> (create this with cases = cases - lockedCases)
          lock <- create WineLock with ..

          return (lock, optRemaining)

mul: Decimal -> Decimal -> Decimal 
mul a b = a * b

arithmetic: Script () 
arithmetic = do 
  assert (1 == 1) 
  assert 
    $ 1 == 1
  assert 
    $ mul 2.0 2.0 == 4.0
  assert 
    $ 2.0 `mul` 2.0 == 4.0
  assert 
    $ 41 == 41
  assert 
    $ (==) 41 41
  assert 
    $ ((\x -> x*x) <$> [1,2,3,4]) == [1,4,9,16]

template WineLock 
  with 
    custodian: Party 
    owner: Party 
    bottling: Bottling 
    userAdmin: Party 
    lockedCases: Int 
  where
    signatory 
      custodian, 
      bottling.producer, 
      userAdmin, 
      bottling.certifiedOrganicBy,
      owner 
    ensure lockedCases > 0
    
    controller custodian can 
      Unlock: ContractId WineCustody 
        do 
          create WineCustody 
            with 
              cases = lockedCases 
              ..
    
      GiveToNewOwner: ContractId WineCustody
        with 
          newOwner: Party 
        do 
          assert $ newOwner /= owner
          create WineCustody 
            with 
              cases = lockedCases 
              owner = newOwner 
              ..

template ProducerRole 
  with 
    producer: Party 
    uid: Text 
    userAdmin: Party 
    limit: Int
  where 
    signatory userAdmin 

    controller producer can 
      nonconsuming ProduceWine: ContractId WineCustody 
        with 
          bottling: Bottling 
        do 
          assert $ bottling.casesProduced < limit
          create WineCustody
            with 
              custodian = producer 
              owner = producer
              cases = bottling.casesProduced
              ..

    controller userAdmin can 
      Revoke: () do return ()

forwardScenario: Script ()
forwardScenario = do 
  producer <- allocatePartyWithHint "Mondavi" (PartyIdHint "Mondavi")
  buyer <- allocatePartyWithHint "KoolWines" (PartyIdHint "KoolWines")
  userAdmin <- allocatePartyWithHint "UserAdmin" (PartyIdHint "UserAdmin")
  californiaOrganic <- allocatePartyWithHint "CaliforniaOrganic" (PartyIdHint "CaliforniaOrganic")

  proposal <- submit producer do 
    createCmd WineForwardProposal
      with 
        seller = producer
        buyer = buyer
        custodian = producer
        maturity = fromGregorian (2021, May, 1)
        cases = 10 
        bottling = Bottling 
          with 
            producer
            vintage = 2020 
            name = "Blockchain"
            appelation = CabFranc
            casesProduced = 2000
            certifiedOrganicBy = Some californiaOrganic

  submit buyer do 
    exerciseCmd proposal Accept

  producerRole <- submit userAdmin do 
    createCmd ProducerRole 
      with 
        producer 
        uid = "Mondavi LLC"
        userAdmin
        limit = 1000

  ownership <- submit producer do 
    exerciseCmd producerRole ProduceWine
      with 
        bottling = Bottling 
          with 
            producer
            vintage = 2020 
            name = "Blockchain"
            appelation = PinotNoir
            casesProduced = 500
            certifiedOrganicBy = None


  submit producer do 
    exerciseCmd ownership TransferOwnership with newOwner = buyer

  

  return ()